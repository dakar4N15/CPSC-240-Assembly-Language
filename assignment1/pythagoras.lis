     1                                  ;***************************************************************************************************************************
     2                                  ;Program name: "Pythagoras Triangle".  This program  will compute the length of the hypotenuse of a right triangle given the*
     3                                  ;lengths of the two sides. The X86 collects the two sides from user and calculate the hypotenuse length, and the C++ receives*
     4                                  ;the length of the hypotenuse side from X86.  Copyright (C) 2023  William Sutanto                                           *
     5                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     6                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     7                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     8                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     9                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    10                                  ;****************************************************************************************************************************
    11                                  
    12                                  
    13                                  
    14                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    15                                  
    16                                  ;Author information
    17                                  ;  Author name: William Sutanto
    18                                  ;  Author email: wsutanto@csu.fullerton.edu
    19                                  ;
    20                                  ;Program information
    21                                  ;  Program name: Pythagoras Triangle
    22                                  ;  Programming languages: One module in C++ and one module in X86
    23                                  ;  Date program began: 2023-Jan-31
    24                                  ;  Date of last update: 2023-Feb-02
    25                                  ;  Comments reorganized: 2023-Feb-02
    26                                  ;  Files in the program: driver.cpp, pythagoras.asm, r.sh
    27                                  ;
    28                                  ;Purpose
    29                                  ;  Build a program in assembly language that will compute the length of the hypotenuse of a right triangle given the lengths of the two sides.
    30                                  ;
    31                                  ;This file
    32                                  ;  File name: pythagoras.asm
    33                                  ;  Language: X86-64
    34                                  ;  Syntax: Intel
    35                                  ;  Max page width: 172 columns
    36                                  ;  Optimal print specification: Landscape, 7-point font, monospace, 172 columns, 8½x11 paper
    37                                  ;  Assemble: nasm -f elf64 -l pythagoras.lis -o pythagoras.o pythagoras.asm
    38                                  ;
    39                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    40                                  ;
    41                                  ;Author information
    42                                  ;  Author name: William Sutanto
    43                                  ;  Author email: wsutanto@csu.fullerton.edu
    44                                  ;
    45                                  ;Program information
    46                                  ;  Program name: Pythagoras Triangle
    47                                  ;  Programming languages: X86 with one module in C++
    48                                  ;  Date program began: 2023-Jan-31
    49                                  ;  Date of last update: 2023-Feb-02
    50                                  ;
    51                                  ;Purpose
    52                                  ;  Build a program in assembly language that will compute the length of the hypotenuse of a right triangle given the lengths of the two sides.
    53                                  ;
    54                                  ;Project information
    55                                  ;  Project files: driver.cpp, pythagoras.asm, r.sh
    56                                  ;  Status: Available for public review.
    57                                  ;
    58                                  ;Translator information
    59                                  ;  Linux: nasm -f elf64 -l pythagoras.lis -o pythagoras.o pythagoras.asm
    60                                  ;
    61                                  ;References and credits
    62                                  ;  
    63                                  ;
    64                                  ;Format information
    65                                  ;  Page width: 172 columns
    66                                  ;  Begin comments: 61
    67                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8½x11 paper
    68                                  ;
    69                                  ;
    70                                  ;
    71                                  ;
    72                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    73                                  ;
    74                                  ;===== Begin code area ====================================================================================================================================================
    75                                  ; Declare external C++ functions & make funct 'pythagoras' visible to other languages & create constant
    76                                  extern printf                       
    77                                  extern scanf                        
    78                                  global pythagoras        
    79                                  
    80                                  segment .data                       ;Place initialized data here
    81                                  
    82                                  ;========== message to be printed to user =================================================================================================================================
    83 00000000 456E74657220746865-     side1prompt db "Enter the length of the first side of the triangle:   ",0         ;to prompt user for length of first side of triangle
    83 00000009 206C656E677468206F-
    83 00000012 662074686520666972-
    83 0000001B 73742073696465206F-
    83 00000024 662074686520747269-
    83 0000002D 616E676C653A202020-
    83 00000036 00                 
    84 00000037 456E74657220746865-     side2prompt db "Enter the length of the second side of the triangle:   ",0        ;to prompt user for length of second side of triangle
    84 00000040 206C656E677468206F-
    84 00000049 662074686520736563-
    84 00000052 6F6E64207369646520-
    84 0000005B 6F6620746865207472-
    84 00000064 69616E676C653A2020-
    84 0000006D 2000               
    85 0000006F 0A5468616E6B20796F-     confirm db 10,"Thank you. You entered two sides:   %.6lf and %.6lf.",10, 0           ;output the length of two sides of triangle entered by user
    85 00000078 752E20596F7520656E-
    85 00000081 74657265642074776F-
    85 0000008A 2073696465733A2020-
    85 00000093 20252E366C6620616E-
    85 0000009C 6420252E366C662E0A-
    85 000000A5 00                 
    86 000000A6 546865206C656E6774-     output_hypotenuse db "The length of the hypotenuse is  %.6lf.", 10, 0            ;output the length of hypotenuse side
    86 000000AF 68206F662074686520-
    86 000000B8 6879706F74656E7573-
    86 000000C1 652069732020252E36-
    86 000000CA 6C662E0A00         
    87 000000CF 4E6567617469766520-     reject_negative db "Negative values not allowed.  Try again:        ",0                 ;error message when user input negative value for side of triangle
    87 000000D8 76616C756573206E6F-
    87 000000E1 7420616C6C6F776564-
    87 000000EA 2E2020547279206167-
    87 000000F3 61696E3A2020202020-
    87 000000FC 20202000           
    88                                  
    89 00000100 256C6600                one_float_format db "%lf",0
    90                                  
    91 00000104 0000000000000000        zeroData dq 0.0     ;declare 0 to be compared to check for negative inputs
    92                                  
    93                                  segment .bss
    94                                  
    95                                  segment .text
    96                                  
    97                                  pythagoras:         ;start execution of program
    98                                  
    99                                  ;Prolog ===== Insurance for any caller of this assembly module ============================================================================================================
   100                                  ;Any future program calling this module that the data in the caller's GPRs will not be modified.
   101 00000000 55                      push rbp                                                    ;Push memory address of base of previous stack frame onto stack top
   102 00000001 4889E5                  mov  rbp,rsp                                                ;Copy value of stack pointer into base pointer, rbp = rsp = both point to stack top
   103                                  ; Rbp now holds the address of the new stack frame, i.e "top" of stack
   104 00000004 57                      push rdi                                                    ;Backup rdi
   105 00000005 56                      push rsi                                                    ;Backup rsi
   106 00000006 52                      push rdx                                                    ;Backup rdx
   107 00000007 51                      push rcx                                                    ;Backup rcx
   108 00000008 4150                    push r8                                                     ;Backup r8
   109 0000000A 4151                    push r9                                                     ;Backup r9
   110 0000000C 4152                    push r10                                                    ;Backup r10
   111 0000000E 4153                    push r11                                                    ;Backup r11
   112 00000010 4154                    push r12                                                    ;Backup r12
   113 00000012 4155                    push r13                                                    ;Backup r13
   114 00000014 4156                    push r14                                                    ;Backup r14
   115 00000016 4157                    push r15                                                    ;Backup r15
   116 00000018 53                      push rbx                                                    ;Backup rbx
   117 00000019 9C                      pushf                                                       ;Backup rflags
   118                                  
   119 0000001A 6A00                    push qword 0                ;registers rax, rip, rsp are usually not backed up
   120                                  
   121                                  ;========== prompt the length for first side of triangle =================================================================================================================
   122 0000001C 6A00                    push qword 0                ;Push 8 bytes to get onto an 16-byte boundary
   123 0000001E B800000000              mov rax, 0                  ;no data from SSE will be printed i.e. 0 xmm registers used
   124 00000023 48BF-                   mov rdi, side1prompt        ;Move message to print to general purpose register rdi
   124 00000025 [0000000000000000] 
   125                                                              ;"Enter the length of the first side of the triangle: "
   126 0000002D E8(00000000)            call printf                 ;Call external C++ print function
   127 00000032 58                      pop rax                     ;Remove the earlier push of the 16-byte boundary
   128                                  
   129                                  ;========== Extract user input by scanf block ============================================================================================================================
   130                                  back1:
   131 00000033 6A00                    push qword 0                ;reserve space in memory for the incoming number
   132 00000035 B801000000              mov rax, 1                  ;1 xmm register will be used in this scanf section
   133 0000003A 48BF-                   mov rdi, one_float_format   ;"%lf"
   133 0000003C [0001000000000000] 
   134 00000044 4889E6                  mov rsi, rsp                ;point scanf to the reserved storage
   135 00000047 E8(00000000)            call scanf                  ;Call external C++ input function
   136 0000004C F2440F101424            movsd xmm10, [rsp]          ;xmm10 register now have the value of user input
   137 00000052 58                      pop rax                     ;remove the earlier push
   138                                  
   139                                  ;========== check user input for negative value ===========================================================================================================================
   140 00000053 F20F102C25-             movsd xmm5, qword [zeroData]  ;move the initialized data zero to xmm5 register
   140 00000058 [04010000]         
   141 0000005C 66440F2ED5              ucomisd xmm10, xmm5           ;compare the user input stored in xmm10 to zero
   142 00000061 7202                    jb isNegative1                ;jump to the portion isNegative1 if input is negative i.e. program will prompt user until positive value is entered
   143 00000063 EB19                    jmp continue1                 ;jump to continue1 if input is not negative i.e. the program continues to prompt user for second side
   144                                  
   145                                  ;========== if input is negative, print input is negative =================================================================================================================
   146                                  isNegative1:
   147 00000065 6A00                    push qword 0                ;Push 8 bytes to get onto an 16-byte boundary
   148 00000067 B800000000              mov rax, 0                  ;0 xmm register is used in this section
   149 0000006C 48BF-                   mov rdi, reject_negative    ;"Negative values not allowed. Try again: "
   149 0000006E [CF00000000000000] 
   150 00000076 E8(00000000)            call printf                 ;call external C++ print function
   151 0000007B 58                      pop rax                     ;remove earlier push
   152 0000007C EBB5                    jmp back1                   ;jump to back1 to get new user input
   153                                  
   154                                  ;========== prompt the length for second side of triangle =================================================================================================================
   155                                  continue1:                  ;if not negative, continue here
   156 0000007E 6A00                    push qword 0                ;Push 8 bytes to get onto an 16-byte boundary
   157 00000080 B800000000              mov rax, 0                  ;0 XMM register used in this section
   158 00000085 48BF-                   mov rdi, side2prompt        ;"Enter the length of the second side of the triangle: "
   158 00000087 [3700000000000000] 
   159 0000008F E8(00000000)            call printf                 ;call external C++ print function
   160 00000094 58                      pop rax                     ;remove earlier push
   161                                  
   162                                  ;========== Extract user input by scanf block ============================================================================================================================
   163                                  back2:
   164 00000095 6A00                    push qword 0                ;reserve space in memory for incoming number
   165 00000097 B801000000              mov rax, 1                  ;1 xmm register will be used in this input section
   166 0000009C 48BF-                   mov rdi, one_float_format   ;"%lf"
   166 0000009E [0001000000000000] 
   167 000000A6 4889E6                  mov rsi, rsp                ;point scanf to the reserved storage
   168 000000A9 E8(00000000)            call scanf                  ;call external C++ input function
   169 000000AE F2440F101C24            movsd xmm11, [rsp]          ;store the input in xmm11 register
   170 000000B4 58                      pop rax                     ;remove earlier push
   171                                  
   172                                  ;========== check user input for negative value ==========================================================================================================================
   173 000000B5 F20F102C25-             movsd xmm5, qword [zeroData]  ;move the initialized data zero to xmm5 register
   173 000000BA [04010000]         
   174 000000BE 66440F2EDD              ucomisd xmm11, xmm5           ;compare the user input stored in xmm11 to zero
   175 000000C3 7202                    jb isNegative2                ;jump to the portion isNegative2 if input is below 0 i.e. program will prompt user until positive value is entered
   176 000000C5 EB19                    jmp continue2                 ;jump to continue2 if input is not negative i.e. the program continues to prompt user for second side
   177                                  
   178                                  ;========== if input is negative, print input is negative ===============================================================================================================
   179                                  isNegative2:
   180 000000C7 6A00                    push qword 0                ;Push 8 bytes to get onto an 16-byte boundary
   181 000000C9 B800000000              mov rax, 0                  ;0 xmm register will be used in this section
   182 000000CE 48BF-                   mov rdi, reject_negative    ;"Negative values not allowed. Try again: "
   182 000000D0 [CF00000000000000] 
   183 000000D8 E8(00000000)            call printf                 ;call external C++ print function
   184 000000DD 58                      pop rax                     ;remove earlier push
   185 000000DE EBB5                    jmp back2                   ;jump to back2 to get new user input
   186                                  
   187                                  ;========== output the two sides entered ===============================================================================================================================
   188                                  continue2:
   189 000000E0 6A00                    push qword 0          ;Push 8 bytes to get onto an 16-byte boundary
   190 000000E2 B802000000              mov rax, 2            ;2 xmm registers will be used in this section
   191 000000E7 F2410F10C2              movsd xmm0, xmm10     ;move the input value stored in xmm10 to xmm0 for the purpose of printing output
   192 000000EC F2410F10CB              movsd xmm1, xmm11     ;move the input value stored in xmm11 to xmm1 for the purpose of printing output
   193 000000F1 48BF-                   mov rdi, confirm      ;"Thank you. You entered two sides: %.8lf and %.8lf."
   193 000000F3 [6F00000000000000] 
   194 000000FB E8(00000000)            call printf           ;call external c++ print function
   195 00000100 58                      pop rax               ;remove earlier push
   196                                  
   197                                  ;========== calculate hypotenuse length ================================================================================================================================
   198 00000101 F2450F10E2              movsd xmm12, xmm10    ;copy first side
   199 00000106 F2450F10EB              movsd xmm13, xmm11    ;copy second side
   200 0000010B F2450F59E4              mulsd xmm12, xmm12    ;a^2
   201 00000110 F2450F59ED              mulsd xmm13, xmm13    ;b^2
   202 00000115 F2450F58E5              addsd xmm12, xmm13    ;a^2 + b^2
   203 0000011A F2450F51F4              sqrtsd xmm14, xmm12   ;sqrt(a^2 + b^2)
   204                                  
   205                                  ;========== output hypotenuse length ===================================================================================================================================
   206 0000011F 6A00                    push qword 0                ;Push 8 bytes to get onto an 16-byte memory
   207 00000121 B801000000              mov rax, 1                  ;1 xmm register will be used in this section
   208 00000126 F2410F10C6              movsd xmm0, xmm14           ;move hypotenuse length stored in xmm14 to xmm0 for the purpose of printing output
   209 0000012B 48BF-                   mov rdi, output_hypotenuse  ;"The length of the hypotenuse is %.12lf."
   209 0000012D [A600000000000000] 
   210 00000135 E8(00000000)            call printf                 ;call external c++ print function
   211 0000013A 58                      pop rax                     ;remove earlier push
   212                                  
   213 0000013B F2410F10C6              movsd xmm0, xmm14           ;to return the hypotenuse length to cpp file
   214 00000140 58                      pop rax                     ;remove earlier push at beginning of code
   215                                  
   216                                  ;===== Restore original values to integer registers ====================================================================================================================
   217 00000141 9D                      popf                                                        ;Restore rflags
   218 00000142 5B                      pop rbx                                                     ;Restore rbx
   219 00000143 415F                    pop r15                                                     ;Restore r15
   220 00000145 415E                    pop r14                                                     ;Restore r14
   221 00000147 415D                    pop r13                                                     ;Restore r13
   222 00000149 415C                    pop r12                                                     ;Restore r12
   223 0000014B 415B                    pop r11                                                     ;Restore r11
   224 0000014D 415A                    pop r10                                                     ;Restore r10
   225 0000014F 4159                    pop r9                                                      ;Restore r9
   226 00000151 4158                    pop r8                                                      ;Restore r8
   227 00000153 59                      pop rcx                                                     ;Restore rcx
   228 00000154 5A                      pop rdx                                                     ;Restore rdx
   229 00000155 5E                      pop rsi                                                     ;Restore rsi
   230 00000156 5F                      pop rdi                                                     ;Restore rdi
   231 00000157 5D                      pop rbp                                                     ;Restore rbp
   232                                  
   233 00000158 C3                      ret
   234                                  ;========== End of program pythagoras.asm =================================================================================================================================
   235                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
