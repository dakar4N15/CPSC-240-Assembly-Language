     1                                  ;***************************************************************************************************************************
     2                                  ;Program name: "Arrays".  This program will prompt user to enter floats and store it into an array and calculate the        *   
     3                                  ;magnitude of that array. There will be 2 sets of arrays, so the program will repeat similar steps twice and at the end     *
     4                                  ;both arrays will be appended into a separate array and the magnitude of that array will be calculated as well. The magnitude*
     5                                  ;of the combined array will be returned to main. Main and display_array is implemented in c, and the rest is implemented    *
     6                                  ;in X86. Copyright (C) 2023  William Sutanto                                         *
     7                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     8                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     9                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
    10                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
    11                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    12                                  ;****************************************************************************************************************************
    13                                  
    14                                  
    15                                  
    16                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    17                                  
    18                                  ;Author information
    19                                  ;  Author name: William Sutanto
    20                                  ;  Author email: wsutanto@csu.fullerton.edu
    21                                  ;
    22                                  ;Program information
    23                                  ;  Program name: Arrays
    24                                  ;  Programming languages: C, X86 assembly
    25                                  ;  Date program began: 2023-Feb-12
    26                                  ;  Date of last update: 2023-Feb-20
    27                                  ;  Comments reorganized: 2023-Feb-20
    28                                  ;  Files in the program: main.c, manager.asm, display_array.c, magnitude.asm, append.asm, input_array.asm, isfloat.asm, r.sh
    29                                  ;
    30                                  ;Purpose
    31                                  ;  Build a program in assembly language that will take in floats from user and store it into an array. This program will repeat the steps twice
    32                                  ;  so that there will be 2 arrays and the magnitude of each array will be calculated. At the end, the 2 arrays will be combined into an array
    33                                  ;  and the magnitude of that array will be calculated and returned to main.
    34                                  ;
    35                                  ;This file
    36                                  ;  File name: input_array.asm
    37                                  ;  Language: X86-64
    38                                  ;  Syntax: Intel
    39                                  ;  Max page width: 172 columns
    40                                  ;  Optimal print specification: Landscape, 7-point font, monospace, 172 columns, 8½x11 paper
    41                                  ;  Assemble: nasm -f elf64 -l input_array.lis -o input_array.o input_array.asm
    42                                  ;
    43                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    44                                  ;
    45                                  ;Author information
    46                                  ;  Author name: William Sutanto
    47                                  ;  Author email: wsutanto@csu.fullerton.edu
    48                                  ;
    49                                  ;Program information
    50                                  ;  Program name: Arrays
    51                                  ;  Programming languages: C, X86 assembly
    52                                  ;  Date program began: 2023-Feb-12
    53                                  ;  Date of last update: 2023-Feb-20
    54                                  ;
    55                                  ;Purpose
    56                                  ;  Build a program in assembly language that will take in floats from user and store it into an array. This program will repeat the steps twice
    57                                  ;  so that there will be 2 arrays and the magnitude of each array will be calculated. At the end, the 2 arrays will be combined into an array
    58                                  ;  and the magnitude of that array will be calculated and returned to main
    59                                  ;
    60                                  ;Project information
    61                                  ;  Project files: main.c, manager.asm, display_array.c, magnitude.asm, append.asm, input_array.asm, isfloat.asm, r.sh
    62                                  ;  Status: Available for public review.
    63                                  ;
    64                                  ;Translator information
    65                                  ;  Linux: nasm -f elf64 -l input_array.lis -o input_array.o input_array.asm
    66                                  ;
    67                                  ;References and credits
    68                                  ;   Professor Floyd Holliday's website for isfloat.asm module 
    69                                  ;   https://sites.google.com/a/fullerton.edu/activeprofessor/4-subjects/x86-programming/library-software/isfloat-x86-only
    70                                  ;  
    71                                  ;
    72                                  ;Format information
    73                                  ;  Page width: 172 columns
    74                                  ;  Begin comments: 61
    75                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8½x11 paper
    76                                  ;
    77                                  ;
    78                                  ;
    79                                  ;
    80                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    81                                  ;
    82                                  ;===== Begin code area ====================================================================================================================================================
    83                                  ; Declare external C++ functions & make funct 'pythagoras' visible to other languages & create constant             
    84                                  extern scanf            ;external C++ function to read input from console
    85                                  extern printf           ;external C++ function to print to console
    86                                  extern stdin            ;external C++ function involved to set failbit to zero
    87                                  extern clearerr         ;external C++ function involved to set failbit to zero
    88                                  extern atof             ;external C++ function that converts string to float
    89                                  extern isfloat          ;asm module to check for float correctness
    90                                  global input_array  
    91                                  
    92                                  segment .data                       ;Place initialized data here
    93                                  ;========== message to be printed to user =================================================================================================================================
    94 00000000 546865206C61737420-     invalid_input db "The last input was invalid and not entered into the array.",10,0      ;tell user that the last input is not a vaild float
    94 00000009 696E70757420776173-
    94 00000012 20696E76616C696420-
    94 0000001B 616E64206E6F742065-
    94 00000024 6E746572656420696E-
    94 0000002D 746F20746865206172-
    94 00000036 7261792E0A00       
    95                                  
    96 0000003C 257300                  one_string_format db "%s",0
    97                                  
    98                                  
    99                                  segment .bss
   100                                  
   101                                  segment .text
   102                                  
   103                                  input_array:         ;start execution of program
   104                                  
   105                                  ;Prolog ===== Insurance for any caller of this assembly module ============================================================================================================
   106                                  ;Any future program calling this module that the data in the caller's GPRs will not be modified.
   107 00000000 55                      push rbp                                                    ;Push memory address of base of previous stack frame onto stack top
   108 00000001 4889E5                  mov  rbp,rsp                                                ;Copy value of stack pointer into base pointer, rbp = rsp = both point to stack top
   109                                  ; Rbp now holds the address of the new stack frame, i.e "top" of stack
   110 00000004 57                      push rdi                                                    ;Backup rdi
   111 00000005 56                      push rsi                                                    ;Backup rsi
   112 00000006 52                      push rdx                                                    ;Backup rdx
   113 00000007 51                      push rcx                                                    ;Backup rcx
   114 00000008 4150                    push r8                                                     ;Backup r8
   115 0000000A 4151                    push r9                                                     ;Backup r9
   116 0000000C 4152                    push r10                                                    ;Backup r10
   117 0000000E 4153                    push r11                                                    ;Backup r11
   118 00000010 4154                    push r12                                                    ;Backup r12
   119 00000012 4155                    push r13                                                    ;Backup r13
   120 00000014 4156                    push r14                                                    ;Backup r14
   121 00000016 4157                    push r15                                                    ;Backup r15
   122 00000018 53                      push rbx                                                    ;Backup rbx
   123 00000019 9C                      pushf                                                       ;Backup rflags
   124                                  
   125 0000001A 6A00                    push qword 0        ;push to remain on the boundary
   126                                  
   127 0000001C 4989FD                  mov r13, rdi        ;this holds the array (array is in r13 now)
   128 0000001F 4989F6                  mov r14, rsi        ;this holds the max size of array
   129 00000022 41BF00000000            mov r15, 0          ;r15 now stores index to store floats into the array (starts at 0)
   130                                  
   131                                  ;========== extract floats from user and store into array ================================================================================================================
   132                                  beginLoop:
   133 00000028 4D39F7                      cmp r15, r14                    ;compare if index is still within boundary of max size of array
   134 0000002B 7465                        je done                         ;jump to out of loop if capacity exceeded
   135 0000002D 6A21                        push qword 33                   ;reserve space in memory
   136 0000002F B800000000                  mov rax, 0                      ;no data from SSE will be printed i.e. 0 xmm registers used
   137 00000034 48BF-                       mov rdi, one_string_format      ;"%s"
   137 00000036 [3C00000000000000] 
   138 0000003E 4889E6                      mov rsi, rsp                    ;point scanf to the reserved storage
   139 00000041 E8(00000000)                call scanf                      ;call external C++ function to read user input
   140                                      ;this section starts ctrl+d checking (if ctrl+d, exit the loop)
   141 00000046 4898                        cdqe
   142 00000048 4883F8FF                    cmp rax, -1                     ;if ctrl+d is entered, rax will be filled with -1
   143 0000004C 7444                        je done                         ;if rax equal to -1, jump to done to exit loop
   144                                      ;check input by calling isfloat module
   145 0000004E B800000000                  mov rax, 0                      ;no data from SSE will be printed i.e. 0 xmm registers used
   146 00000053 4889E7                      mov rdi, rsp                    ;move the string extracted from user earlier using scanf to rdi so that it will be passed as first parameter to asm isfloat module
   147 00000056 E8(00000000)                call isfloat                    ;call asm isfloat module
   148 0000005B 4883F8FF                    cmp rax, -1                     ;isfloat will return -1 if the previously entered string is a float and return 0 if not a float
   149 0000005F 7417                        je continue                     ;if isfloat return -1 indicating that its a float, jump to continue to enter the float to array
   150                                      ;if invalid/value entered is not a float
   151 00000061 B800000000                  mov rax, 0                      ;no data from SSE will be printed i.e. 0 xmm registers used
   152 00000066 48BF-                       mov rdi, invalid_input          ;"The last input was invalid and not entered into the array."
   152 00000068 [0000000000000000] 
   153 00000070 E8(00000000)                call printf                     ;call external C++ function to print
   154 00000075 58                          pop rax                         ;remove earlier push at the beginning of beginLoop
   155 00000076 EBB0                        jmp beginLoop                   ;jump to beginning of loop to continue extract inputs from user
   156                                      ;if valid/value entered is a float
   157                                      continue:
   158 00000078 4889E7                          mov rdi, rsp                ;move the string extracted by scanf earlier to rdi so that it will passed when calling atof module
   159 0000007B E8(00000000)                    call atof                   ;call external C++ function to convert string into float
   160 00000080 F2440F10F8                      movsd xmm15, xmm0           ;store the float returned by atof in xmm15
   161 00000085 F2470F117CFD00                  movsd [r13 + r15*8], xmm15  ;store the float into array
   162 0000008C 49FFC7                          inc r15                     ;increment index to store the next float into the array
   163 0000008F 58                              pop rax                     ;remove earlier push at the beginning of beginLoop
   164 00000090 EB96                            jmp beginLoop               ;jump to beginning of loop to continue extract inputs from user
   165                                  
   166                                  done:
   167                                  ;Block to set the failbit to zero. Equivalent to cin.clear()
   168 00000092 B800000000              mov rax, 0
   169 00000097 488B3C25[00000000]      mov rdi, [stdin]
   170 0000009F E8(00000000)            call clearerr
   171                                  
   172 000000A4 58                      pop rax             ;remove earlier push at the beginning of beginLoop
   173 000000A5 58                      pop rax             ;counter push at beginning
   174 000000A6 4C89F8                  mov rax, r15        ;store the index of the array, to be return to manager.asm to keep number of floats in the array
   175                                  
   176                                  ;===== Restore original values to integer registers ====================================================================================================================
   177 000000A9 9D                      popf                                                        ;Restore rflags
   178 000000AA 5B                      pop rbx                                                     ;Restore rbx
   179 000000AB 415F                    pop r15                                                     ;Restore r15
   180 000000AD 415E                    pop r14                                                     ;Restore r14
   181 000000AF 415D                    pop r13                                                     ;Restore r13
   182 000000B1 415C                    pop r12                                                     ;Restore r12
   183 000000B3 415B                    pop r11                                                     ;Restore r11
   184 000000B5 415A                    pop r10                                                     ;Restore r10
   185 000000B7 4159                    pop r9                                                      ;Restore r9
   186 000000B9 4158                    pop r8                                                      ;Restore r8
   187 000000BB 59                      pop rcx                                                     ;Restore rcx
   188 000000BC 5A                      pop rdx                                                     ;Restore rdx
   189 000000BD 5E                      pop rsi                                                     ;Restore rsi
   190 000000BE 5F                      pop rdi                                                     ;Restore rdi
   191 000000BF 5D                      pop rbp                                                     ;Restore rbp
   192                                  
   193 000000C0 C3                      ret
   194                                  ;========== End of program pythagoras.asm =================================================================================================================================
   195                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
   196                                  
