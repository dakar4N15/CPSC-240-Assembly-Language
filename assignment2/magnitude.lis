     1                                  ;***************************************************************************************************************************
     2                                  ;Program name: "Arrays".  This program will prompt user to enter floats and store it into an array and calculate the        *   
     3                                  ;magnitude of that array. There will be 2 sets of arrays, so the program will repeat similar steps twice and at the end     *
     4                                  ;both arrays will be appended into a separate array and the magnitude of that array will be calculated as well. The magnitude*
     5                                  ;of the combined array will be returned to main. Main and display_array is implemented in c, and the rest is implemented    *
     6                                  ;in X86. Copyright (C) 2023  William Sutanto                                                                                *
     7                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     8                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     9                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
    10                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
    11                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    12                                  ;****************************************************************************************************************************
    13                                  
    14                                  
    15                                  
    16                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    17                                  
    18                                  ;Author information
    19                                  ;  Author name: William Sutanto
    20                                  ;  Author email: wsutanto@csu.fullerton.edu
    21                                  ;
    22                                  ;Program information
    23                                  ;  Program name: Arrays
    24                                  ;  Programming languages: C, X86
    25                                  ;  Date program began: 2023-Feb-12
    26                                  ;  Date of last update: 2023-Feb-20
    27                                  ;  Comments reorganized: 2023-Feb-20
    28                                  ;  Files in the program: main.c, manager.asm, display_array.c, magnitude.asm, append.asm, input_array.asm, isfloat.asm, r.sh
    29                                  ;
    30                                  ;Purpose
    31                                  ;  Build a program in assembly language that will take in floats from user and store it into an array. This program will repeat the steps twice
    32                                  ;  so that there will be 2 arrays and the magnitude of each array will be calculated. At the end, the 2 arrays will be combined into an array
    33                                  ;  and the magnitude of that array will be calculated and returned to main.
    34                                  ;
    35                                  ;This file
    36                                  ;  File name: magnitude.asm
    37                                  ;  Language: X86-64
    38                                  ;  Syntax: Intel
    39                                  ;  Max page width: 172 columns
    40                                  ;  Optimal print specification: Landscape, 7-point font, monospace, 172 columns, 8½x11 paper
    41                                  ;  Assemble: nasm -f elf64 -l magnitude.lis -o magnitude.o magnitude.asm
    42                                  ;
    43                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    44                                  ;
    45                                  ;Author information
    46                                  ;  Author name: William Sutanto
    47                                  ;  Author email: wsutanto@csu.fullerton.edu
    48                                  ;
    49                                  ;Program information
    50                                  ;  Program name: Arrays
    51                                  ;  Programming languages: X86, C
    52                                  ;  Date program began: 2023-Feb-12
    53                                  ;  Date of last update: 2023-Feb-20
    54                                  ;
    55                                  ;Purpose
    56                                  ;  Build a program in assembly language that will take in floats from user and store it into an array. This program will repeat the steps twice
    57                                  ;  so that there will be 2 arrays and the magnitude of each array will be calculated. At the end, the 2 arrays will be combined into an array
    58                                  ;  and the magnitude of that array will be calculated and returned to main.
    59                                  ;
    60                                  ;Project information
    61                                  ;  Project files: main.c, manager.asm, display_array.c, magnitude.asm, append.asm, input_array.asm, isfloat.asm, r.sh
    62                                  ;  Status: Available for public review.
    63                                  ;
    64                                  ;Translator information
    65                                  ;  Linux: nasm -f elf64 -l magnitude.lis -o magnitude.o magnitude.asm
    66                                  ;
    67                                  ;References and credits
    68                                  ;   Professor Floyd Holliday's website for isfloat.asm module 
    69                                  ;   https://sites.google.com/a/fullerton.edu/activeprofessor/4-subjects/x86-programming/library-software/isfloat-x86-only
    70                                  ;  
    71                                  ;
    72                                  ;Format information
    73                                  ;  Page width: 172 columns
    74                                  ;  Begin comments: 61
    75                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8½x11 paper
    76                                  ;
    77                                  ;
    78                                  ;
    79                                  ;
    80                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    81                                  ;
    82                                  ;===== Begin code area ====================================================================================================================================================
    83                                  global magnitude
    84                                  
    85                                  segment .data
    86                                  
    87                                  segment .bss
    88                                  
    89                                  segment .text
    90                                  
    91                                  magnitude:          ;start execution of program
    92                                  
    93                                  ;Prolog ===== Insurance for any caller of this assembly module ============================================================================================================
    94                                  ;Any future program calling this module that the data in the caller's GPRs will not be modified.
    95 00000000 55                      push rbp                                                    ;Push memory address of base of previous stack frame onto stack top
    96 00000001 4889E5                  mov  rbp,rsp                                                ;Copy value of stack pointer into base pointer, rbp = rsp = both point to stack top
    97                                  ; Rbp now holds the address of the new stack frame, i.e "top" of stack
    98 00000004 57                      push rdi                                                    ;Backup rdi
    99 00000005 56                      push rsi                                                    ;Backup rsi
   100 00000006 52                      push rdx                                                    ;Backup rdx
   101 00000007 51                      push rcx                                                    ;Backup rcx
   102 00000008 4150                    push r8                                                     ;Backup r8
   103 0000000A 4151                    push r9                                                     ;Backup r9
   104 0000000C 4152                    push r10                                                    ;Backup r10
   105 0000000E 4153                    push r11                                                    ;Backup r11
   106 00000010 4154                    push r12                                                    ;Backup r12
   107 00000012 4155                    push r13                                                    ;Backup r13
   108 00000014 4156                    push r14                                                    ;Backup r14
   109 00000016 4157                    push r15                                                    ;Backup r15
   110 00000018 53                      push rbx                                                    ;Backup rbx
   111 00000019 9C                      pushf                                                       ;Backup rflags
   112                                  
   113 0000001A 4989FD                  mov r13, rdi            ;this holds the array (array is in r13 now)
   114 0000001D 4989F6                  mov r14, rsi            ;this holds the size of array
   115 00000020 66450F57FF              xorpd xmm15, xmm15      ;0.0 xmm15 is used to accumulate sum of squared floats in the array
   116 00000025 66450F57F6              xorpd xmm14, xmm14      ;0.0 xmm14 is used to access the value of float at array[counter]
   117 0000002A 41BC00000000            mov r12, 0              ;r12 stores index of array
   118                                  
   119                                  ;========== Append the floats in the array =============================================================================================================================
   120                                  beginLoop:
   121 00000030 4D39F4                      cmp r12, r14               ;compare if index is still within bounds of array size
   122 00000033 7416                        je done                    ;if capacity of array is reached, jump to out of loop
   123 00000035 F2470F1074E500              movsd xmm14, [r13 + 8*r12] ;move float value at array[counter] to xmm14
   124 0000003C F2450F59F6                  mulsd xmm14, xmm14         ;square the float
   125 00000041 F2450F58FE                  addsd xmm15, xmm14         ;add the squared float to xmm15
   126 00000046 49FFC4                      inc r12                    ;increment the counter
   127 00000049 EBE5                        jmp beginLoop
   128                                  
   129                                  done:
   130 0000004B F2450F51D7              sqrtsd xmm10, xmm15            ;finalize calculation of magnitude by doing square root of the squared sum of floats in the array stored in xmm15
   131                                                                 ;magnitude of array is stored in xmm10
   132                                      
   133 00000050 F2410F10C2              movsd xmm0, xmm10              ;return magnitude to caller
   134                                  
   135                                  ;===== Restore original values to integer registers ====================================================================================================================
   136 00000055 9D                      popf                                                        ;Restore rflags
   137 00000056 5B                      pop rbx                                                     ;Restore rbx
   138 00000057 415F                    pop r15                                                     ;Restore r15
   139 00000059 415E                    pop r14                                                     ;Restore r14
   140 0000005B 415D                    pop r13                                                     ;Restore r13
   141 0000005D 415C                    pop r12                                                     ;Restore r12
   142 0000005F 415B                    pop r11                                                     ;Restore r11
   143 00000061 415A                    pop r10                                                     ;Restore r10
   144 00000063 4159                    pop r9                                                      ;Restore r9
   145 00000065 4158                    pop r8                                                      ;Restore r8
   146 00000067 59                      pop rcx                                                     ;Restore rcx
   147 00000068 5A                      pop rdx                                                     ;Restore rdx
   148 00000069 5E                      pop rsi                                                     ;Restore rsi
   149 0000006A 5F                      pop rdi                                                     ;Restore rdi
   150 0000006B 5D                      pop rbp                                                     ;Restore rbp
   151                                  
   152 0000006C C3                      ret
   153                                  ;========== End of program pythagoras.asm =================================================================================================================================
   154                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
   155                                  
   156                                  
   157                                  
